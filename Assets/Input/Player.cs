//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Wendell"",
            ""id"": ""03590b69-7d82-4726-bc20-40ed99cd7dc9"",
            ""actions"": [
                {
                    ""name"": ""Mover"",
                    ""type"": ""Value"",
                    ""id"": ""c1a3505c-3e03-4652-aa48-60fb0bc70da4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pular"",
                    ""type"": ""Button"",
                    ""id"": ""fbfc8bcc-378c-4a34-8ba4-04a6d33ccf3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""d4733e38-9a28-49b0-89ec-58aad7f2b4ee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Correr"",
                    ""type"": ""Button"",
                    ""id"": ""bb6391a8-f4ce-4e9f-98ad-84c6467d767a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Acao"",
                    ""type"": ""Button"",
                    ""id"": ""7147d0b9-4b93-4940-96da-d1adb7e7a15a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""da5c7ec8-a1df-4e38-8853-76a0ee2e5bbc"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f15a2a7-e36d-4361-8421-9f5dccf56f8c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pular"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc166b42-79ac-4c1f-9eaf-e1d8f382587d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""faf27070-f081-4285-8705-37999ffb343e"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Correr"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea7ef468-b65c-4acc-8c30-0ea79233ce6a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Navegar"",
            ""id"": ""8cee1312-329b-4aa4-84b1-07f244e57ed3"",
            ""actions"": [
                {
                    ""name"": ""Mover"",
                    ""type"": ""Value"",
                    ""id"": ""4fbdb60f-1f8f-47d6-9015-f3697e314630"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Navegar"",
                    ""type"": ""Button"",
                    ""id"": ""637a33cd-6c44-44b1-a4b5-25f536dca2de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eaa5cbb9-85c4-4025-b8ed-b47a47a1b0e8"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41c99a19-3e5a-472f-8d6e-277646468372"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navegar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Wendell
        m_Wendell = asset.FindActionMap("Wendell", throwIfNotFound: true);
        m_Wendell_Mover = m_Wendell.FindAction("Mover", throwIfNotFound: true);
        m_Wendell_Pular = m_Wendell.FindAction("Pular", throwIfNotFound: true);
        m_Wendell_Camera = m_Wendell.FindAction("Camera", throwIfNotFound: true);
        m_Wendell_Correr = m_Wendell.FindAction("Correr", throwIfNotFound: true);
        m_Wendell_Acao = m_Wendell.FindAction("Acao", throwIfNotFound: true);
        // Navegar
        m_Navegar = asset.FindActionMap("Navegar", throwIfNotFound: true);
        m_Navegar_Mover = m_Navegar.FindAction("Mover", throwIfNotFound: true);
        m_Navegar_Navegar = m_Navegar.FindAction("Navegar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Wendell
    private readonly InputActionMap m_Wendell;
    private List<IWendellActions> m_WendellActionsCallbackInterfaces = new List<IWendellActions>();
    private readonly InputAction m_Wendell_Mover;
    private readonly InputAction m_Wendell_Pular;
    private readonly InputAction m_Wendell_Camera;
    private readonly InputAction m_Wendell_Correr;
    private readonly InputAction m_Wendell_Acao;
    public struct WendellActions
    {
        private @Player m_Wrapper;
        public WendellActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mover => m_Wrapper.m_Wendell_Mover;
        public InputAction @Pular => m_Wrapper.m_Wendell_Pular;
        public InputAction @Camera => m_Wrapper.m_Wendell_Camera;
        public InputAction @Correr => m_Wrapper.m_Wendell_Correr;
        public InputAction @Acao => m_Wrapper.m_Wendell_Acao;
        public InputActionMap Get() { return m_Wrapper.m_Wendell; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WendellActions set) { return set.Get(); }
        public void AddCallbacks(IWendellActions instance)
        {
            if (instance == null || m_Wrapper.m_WendellActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WendellActionsCallbackInterfaces.Add(instance);
            @Mover.started += instance.OnMover;
            @Mover.performed += instance.OnMover;
            @Mover.canceled += instance.OnMover;
            @Pular.started += instance.OnPular;
            @Pular.performed += instance.OnPular;
            @Pular.canceled += instance.OnPular;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
            @Correr.started += instance.OnCorrer;
            @Correr.performed += instance.OnCorrer;
            @Correr.canceled += instance.OnCorrer;
            @Acao.started += instance.OnAcao;
            @Acao.performed += instance.OnAcao;
            @Acao.canceled += instance.OnAcao;
        }

        private void UnregisterCallbacks(IWendellActions instance)
        {
            @Mover.started -= instance.OnMover;
            @Mover.performed -= instance.OnMover;
            @Mover.canceled -= instance.OnMover;
            @Pular.started -= instance.OnPular;
            @Pular.performed -= instance.OnPular;
            @Pular.canceled -= instance.OnPular;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
            @Correr.started -= instance.OnCorrer;
            @Correr.performed -= instance.OnCorrer;
            @Correr.canceled -= instance.OnCorrer;
            @Acao.started -= instance.OnAcao;
            @Acao.performed -= instance.OnAcao;
            @Acao.canceled -= instance.OnAcao;
        }

        public void RemoveCallbacks(IWendellActions instance)
        {
            if (m_Wrapper.m_WendellActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWendellActions instance)
        {
            foreach (var item in m_Wrapper.m_WendellActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WendellActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WendellActions @Wendell => new WendellActions(this);

    // Navegar
    private readonly InputActionMap m_Navegar;
    private List<INavegarActions> m_NavegarActionsCallbackInterfaces = new List<INavegarActions>();
    private readonly InputAction m_Navegar_Mover;
    private readonly InputAction m_Navegar_Navegar;
    public struct NavegarActions
    {
        private @Player m_Wrapper;
        public NavegarActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mover => m_Wrapper.m_Navegar_Mover;
        public InputAction @Navegar => m_Wrapper.m_Navegar_Navegar;
        public InputActionMap Get() { return m_Wrapper.m_Navegar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NavegarActions set) { return set.Get(); }
        public void AddCallbacks(INavegarActions instance)
        {
            if (instance == null || m_Wrapper.m_NavegarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NavegarActionsCallbackInterfaces.Add(instance);
            @Mover.started += instance.OnMover;
            @Mover.performed += instance.OnMover;
            @Mover.canceled += instance.OnMover;
            @Navegar.started += instance.OnNavegar;
            @Navegar.performed += instance.OnNavegar;
            @Navegar.canceled += instance.OnNavegar;
        }

        private void UnregisterCallbacks(INavegarActions instance)
        {
            @Mover.started -= instance.OnMover;
            @Mover.performed -= instance.OnMover;
            @Mover.canceled -= instance.OnMover;
            @Navegar.started -= instance.OnNavegar;
            @Navegar.performed -= instance.OnNavegar;
            @Navegar.canceled -= instance.OnNavegar;
        }

        public void RemoveCallbacks(INavegarActions instance)
        {
            if (m_Wrapper.m_NavegarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INavegarActions instance)
        {
            foreach (var item in m_Wrapper.m_NavegarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NavegarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NavegarActions @Navegar => new NavegarActions(this);
    public interface IWendellActions
    {
        void OnMover(InputAction.CallbackContext context);
        void OnPular(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnCorrer(InputAction.CallbackContext context);
        void OnAcao(InputAction.CallbackContext context);
    }
    public interface INavegarActions
    {
        void OnMover(InputAction.CallbackContext context);
        void OnNavegar(InputAction.CallbackContext context);
    }
}
