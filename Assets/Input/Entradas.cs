//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Entradas.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Entradas: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Entradas()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Entradas"",
    ""maps"": [
        {
            ""name"": ""Navegante"",
            ""id"": ""3716a470-3663-4976-9795-ca04120daf36"",
            ""actions"": [
                {
                    ""name"": ""Mover"",
                    ""type"": ""Value"",
                    ""id"": ""e0b2f3af-56fd-4213-811d-c0f4508ab809"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""8abee0bd-efc3-4ab7-8a49-66f202bbcf5b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19a34e7d-4476-4272-a102-f53070d88191"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""249e31f9-26bf-4a0d-96fd-29d6c96e117d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Navegante
        m_Navegante = asset.FindActionMap("Navegante", throwIfNotFound: true);
        m_Navegante_Mover = m_Navegante.FindAction("Mover", throwIfNotFound: true);
        m_Navegante_Camera = m_Navegante.FindAction("Camera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Navegante
    private readonly InputActionMap m_Navegante;
    private List<INaveganteActions> m_NaveganteActionsCallbackInterfaces = new List<INaveganteActions>();
    private readonly InputAction m_Navegante_Mover;
    private readonly InputAction m_Navegante_Camera;
    public struct NaveganteActions
    {
        private @Entradas m_Wrapper;
        public NaveganteActions(@Entradas wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mover => m_Wrapper.m_Navegante_Mover;
        public InputAction @Camera => m_Wrapper.m_Navegante_Camera;
        public InputActionMap Get() { return m_Wrapper.m_Navegante; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NaveganteActions set) { return set.Get(); }
        public void AddCallbacks(INaveganteActions instance)
        {
            if (instance == null || m_Wrapper.m_NaveganteActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NaveganteActionsCallbackInterfaces.Add(instance);
            @Mover.started += instance.OnMover;
            @Mover.performed += instance.OnMover;
            @Mover.canceled += instance.OnMover;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
        }

        private void UnregisterCallbacks(INaveganteActions instance)
        {
            @Mover.started -= instance.OnMover;
            @Mover.performed -= instance.OnMover;
            @Mover.canceled -= instance.OnMover;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
        }

        public void RemoveCallbacks(INaveganteActions instance)
        {
            if (m_Wrapper.m_NaveganteActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INaveganteActions instance)
        {
            foreach (var item in m_Wrapper.m_NaveganteActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NaveganteActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NaveganteActions @Navegante => new NaveganteActions(this);
    public interface INaveganteActions
    {
        void OnMover(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
    }
}
